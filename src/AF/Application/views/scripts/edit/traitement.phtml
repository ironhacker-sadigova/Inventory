<?php
use AF\Domain\AF;
use AF\Domain\Algorithm\Selection\MainSelectionAlgo;
use MyCLabs\MUIH\Collapse;

/** @var $af AF */
$af = $this->af;


// Algo principal
$algoMainCollapse = new Collapse('algoMainCollapse', __('AF', 'configTreatmentCollapse', 'executionAlgorithmCollapse'));

$saveLabel = __('UI', 'verb', 'save');
$content = <<<HTML
<form id="mainAlgo" class="form-horizontal" action="af/edit/algo-main-submit?id={$af->getId()}" method="post">
    <div class="form-group">
        <label for="inputExpression" class="col-sm-2 control-label">
            Expression
        </label>
        <div class="col-sm-10">
            <textarea class="form-control" id="inputExpression" name="expression"
                      rows="5">{$af->getMainAlgo()->getExpression()}</textarea>
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-10 col-sm-offset-2">
            <button type="submit" class="btn btn-primary">
                $saveLabel
            </button>
        </div>
    </div>
</form>

<script>
    $(function() {
        new AjaxForm('#mainAlgo');
    });
</script>
HTML;

$algoMainCollapse->setContent($content);
echo $algoMainCollapse->render();


// Algorithmes numériques
$algoNumericCollapse = new Collapse(
    'algoNumericCollapse',
    __('AF', 'configTreatmentCollapse', 'numericAlgorithmCollapse')
);

// Numeric expression
$algoNumericExpressionCollapse = new Collapse('algoNumericExpressionCollapse', __('TEC', 'name', 'expressions'));
$algoNumericExpressionCollapse->setContent($this->partial('edit/algos/numeric-expression.phtml', ['af' => $af]));
// Parameter
$algoNumericParameterCollapse = new Collapse('algoNumericParameterCollapse', __('UI', 'name', 'parameters'));
$algoNumericParameterCollapse->setContent($this->partial('edit/algos/numeric-parameter.phtml', [
    'af' => $af,
    'parameterLibraries' => $this->parameterLibraries,
]));
// Constantes
$algoNumericConstantCollapse = new Collapse('algoNumericConstantCollapse', __('UI', 'name', 'constants'));
$algoNumericConstantCollapse->setContent($this->partial('edit/algos/numeric-constant.phtml', ['af' => $af]));
// Numeric input
$algoNumericInputCollapse = new Collapse(
    'algoNumericInputCollapse',
    __('AF', 'configTreatmentCollapse', 'numericInputCollapse')
);
$algoNumericInputCollapse->setContent(
    $this->partial('edit/algos/numeric-input.phtml', ['af' => $af, 'numericInputList' => $this->numericInputList])
);

$algoNumericCollapse->setContent(
    $algoNumericExpressionCollapse->render()
    . $algoNumericParameterCollapse->render()
    . $algoNumericConstantCollapse->render()
    . $algoNumericInputCollapse->render()
);
echo $algoNumericCollapse->render();


// Algorithmes de sélection
$algoSelectionTextKeyCollapse = new Collapse(
    'algoSelectionTextKeyCollapse',
    __('AF', 'configTreatmentCollapse', 'textkeySelectionAlgorithmCollapse')
);

// Algorithmes de sélection de type "Expression"
$algoSelectionTextKeyExpressionCollapse = new Collapse(
    'algoSelectionTextKeyExpressionCollapse',
    __('TEC', 'name', 'expressions')
);
$algoSelectionTextKeyExpressionCollapse->setContent(
    $this->partial('edit/algos/selection-textkey-expression.phtml', ['af' => $af])
);

// Algorithmes de sélection à partir d'une saisie de champ de sélection simple
$algoSelectionTextKeyInputCollapse = new Collapse(
    'algoSelectionTextKeyInputCollapse',
    __('AF', 'configTreatmentCollapse', 'inputTextkeySelectionCollapse')
);
$algoSelectionTextKeyInputCollapse->setContent(
    $this->partial('edit/algos/selection-textkey-input.phtml', ['af' => $af])
);

// Algorithmes de sélection de type "ContextValue"
$algoSelectionTextKeyContextValueCollapse = new Collapse(
    'algoSelectionTextKeyContextValueCollapse',
    __('AF', 'configTreatmentCollapse', 'orgaCoordinateTextkeySelectionCollapse')
);
$algoSelectionTextKeyContextValueCollapse->setContent(
    $this->partial('edit/algos/selection-textkey-context-value.phtml', ['af' => $af])
);

$algoSelectionTextKeyCollapse->setContent(
    $algoSelectionTextKeyExpressionCollapse->render()
    . $algoSelectionTextKeyInputCollapse->render()
    . $algoSelectionTextKeyContextValueCollapse->render()
);
echo $algoSelectionTextKeyCollapse->render();


// Conditions
$algoConditionCollapse = new Collapse('algoConditionCollapse', __('UI', 'name', 'conditions'));

// Conditions composées
$algoConditionExpressionCollapse = new Collapse(
    'algoConditionExpressionCollapse',
    __('AF', 'configInteractionCollapse', 'composedConditionCollapse')
);
$algoConditionExpressionCollapse->setContent($this->partial('edit/algos/condition-expression.phtml', ['af' => $af]));

// Conditions élémentaires
$algoConditionElementaryCollapse = new Collapse(
    'algoConditionElementaryCollapse',
    __('AF', 'configInteractionCollapse', 'elementaryConditionCollapse')
);
$algoConditionElementaryCollapse->setContent(
    $this->partial('edit/algos/condition-elementary.phtml', ['af' => $af, 'fieldList' => $this->fieldList])
);

$algoConditionCollapse->setContent(
    $algoConditionExpressionCollapse->render()
    . $algoConditionElementaryCollapse->render()
);
echo $algoConditionCollapse->render();
?>

<script>
    $('#algoNumericExpressionCollapse').on('show.bs.collapse', function(e) {
        if ($(e.target).attr('id') == 'algoNumericExpressionCollapse') {
            algoNumericExpression.filter();
        }
    });
    $('#algoNumericParameterCollapse').on('show.bs.collapse', function(e) {
        if ($(e.target).attr('id') == 'algoNumericParameterCollapse') {
            algoNumericParameter.filter();
        }
    });
    $('#algoNumericConstantCollapse').on('show.bs.collapse', function(e) {
        if ($(e.target).attr('id') == 'algoNumericConstantCollapse') {
            algoNumericConstant.filter();
        }
    });
    $('#algoNumericInputCollapse').on('show.bs.collapse', function(e) {
        if ($(e.target).attr('id') == 'algoNumericInputCollapse') {
            algoNumericInput.filter();
        }
    });
    $('#algoSelectionTextKeyExpressionCollapse').on('show.bs.collapse', function(e) {
        if ($(e.target).attr('id') == 'algoSelectionTextKeyExpressionCollapse') {
            algoSelectionTextkeyExpression.filter();
        }
    });
    $('#algoSelectionTextKeyInputCollapse').on('show.bs.collapse', function(e) {
        if ($(e.target).attr('id') == 'algoSelectionTextKeyInputCollapse') {
            algoSelectionTextkeyInput.filter();
        }
    });
    $('#algoSelectionTextKeyContextValueCollapse').on('show.bs.collapse', function(e) {
        if ($(e.target).attr('id') == 'algoSelectionTextKeyContextValueCollapse') {
            algoSelectionTextkeyContextValue.filter();
        }
    });
    $('#algoConditionExpressionCollapse').on('show.bs.collapse', function(e) {
        if ($(e.target).attr('id') == 'algoConditionExpressionCollapse') {
            algoConditionExpression.filter();
        }
    });
    $('#algoConditionElementaryCollapse').on('show.bs.collapse', function(e) {
        if ($(e.target).attr('id') == 'algoConditionElementaryCollapse') {
            algoConditionElementary.filter();
        }
    });
</script>
