<?php
use AF\Domain\Action\Action;
use AF\Domain\Action\SetAlgoValue;
use AF\Domain\Action\SetValue\SetNumericFieldValue;
use AF\Domain\Action\SetValue\SetCheckboxValue;
use AF\Domain\Action\SetValue\Select\SetSelectSingleValue;
use AF\Domain\Component\Select\SelectSingle;
use AF\Domain\Algorithm\Numeric\NumericAlgo;

/** @var $action Action */
$action = $this->action;
$af = $action->getTargetComponent()->getAf();

$locale = Core_Locale::loadDefault();

$form = new UI_Form('updateAction');
$form->setAjax(false);
$form->setAction('af/edit_actions/update-action-submit/idAF/' . $af->getId() . '/idAction/' . $action->getId());

if ($action instanceof SetNumericFieldValue) {
    /** @var $action \AF\Domain\Action\SetValue\SetNumericFieldValue */
    // Valeur numerique
    $numericValue = new UI_Form_Element_Text('numericValue');
    $numericValue->setLabel(__('AF', 'configInteractionDatagrid', 'valueToBeAssignedLabel'));
    $numericValue->setValue($locale->formatNumberForInput($action->getValue()->getDigitalValue()));
    $form->addElement($numericValue);
    // Incertitude
    $numericUncertainty = new UI_Form_Element_Text('numericUncertainty');
    $numericUncertainty->setLabel(__('AF', 'configInteractionDatagrid', 'uncertaintyToBeAssignedLabel'));
    $numericUncertainty->setValue($action->getValue()->getRelativeUncertainty());
    $form->addElement($numericUncertainty);
}

if ($action instanceof SetCheckboxValue) {
    /** @var $action \AF\Domain\Action\SetValue\SetCheckboxValue */
    // Boutons radios indiquant si l'action est coché ou décoché
    $checkboxValue = new UI_Form_Element_Radio('checkboxValue');
    $optionChecked = new UI_Form_Element_Option('checked', 1);
    $optionChecked->label = __('UI', 'property', 'checked');
    $checkboxValue->addOption($optionChecked);
    $optionUnChecked = new UI_Form_Element_Option('uncheked', 0);
    $optionUnChecked->label = __('UI', 'property', 'unchecked');
    $checkboxValue->addOption($optionUnChecked);
    $checkboxValue->setValue((int) $action->getChecked());
    $form->addElement($checkboxValue);
}

if ($action instanceof SetSelectSingleValue) {
    /** @var $action SetSelectSingleValue */
    // Liste de selection de l'option à selectionner
    $selectOptionValue = new UI_Form_Element_Select('selectOptionValue');
    $selectOptionValue->setLabel(__('AF', 'configInteractionDatagrid', 'valueToBeAssignedLabel'));
    $selectOptionValue->addNullOption('', null);
    /** @var $selectField SelectSingle */
    $selectField = $action->getTargetComponent();
    foreach ($selectField->getOptions() as $option) {
        $uiOption = new UI_Form_Element_Option($option->getRef(), $option->getId(), $option->getLabel());
        $selectOptionValue->addOption($uiOption);
    }
    if ($action->getOption()) {
        $selectOptionValue->setValue($action->getOption()->getId());
    }
    $form->addElement($selectOptionValue);
}

if ($action instanceof SetAlgoValue) {
    /** @var $action SetAlgoValue */
    // Liste de selection de l'option à selectionner
    $algoSelect = new UI_Form_Element_Select('algoSelect');
    $algoSelect->setLabel(__('AF', 'configInteractionDatagrid', 'algorithmToBeAssignedLabel'));
    foreach ($af->getAlgos() as $algo) {
        if ($algo instanceof NumericAlgo) {
            $uiOption = new UI_Form_Element_Option($algo->getRef(), $algo->getId(), $algo->getLabel());
            $algoSelect->addOption($uiOption);
        }
    }
    if ($action->getAlgo()) {
        $algoSelect->setValue($action->getAlgo()->getId());
    }
    $form->addElement($algoSelect);
}

$form->addSubmitButton();
echo $form->render();
