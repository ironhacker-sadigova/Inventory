<?php
use AF\Domain\AF;
use AF\Domain\Input\SubAF\RepeatedSubAFInput;
use AF\Domain\Input\SubAF\NotRepeatedSubAFInput;
use AF\Domain\InputSet\InputSet;
use AF\Domain\InputSet\PrimaryInputSet;
use AF\Domain\InputSet\SubInputSet;
use AF\Domain\Output\OutputSet;
use AF\Domain\Algorithm\Algo;
use AF\Domain\Algorithm\Numeric\NumericParameterAlgo;
use AF\Domain\Algorithm\Numeric\NumericInputAlgo;
use AF\Domain\Algorithm\Numeric\NumericExpressionAlgo;
use AF\Domain\Algorithm\Numeric\NumericConstantAlgo;
use AF\Domain\Algorithm\Numeric\NumericAlgo;
use AF\Domain\Algorithm\Selection\MainSelectionAlgo;
use MyCLabs\MUIH\Button;
use MyCLabs\MUIH\Collapse;
use MyCLabs\MUIH\Icon;

/** @var $af AF */
$af = $this->af;
/** @var $inputSet PrimaryInputSet|null */
$inputSet = $this->inputSet;
/** @var $outputSet OutputSet|null */
$outputSet = $inputSet ? $inputSet->getOutputSet() : null;

UI_Datagrid::addHeader();

if (!$inputSet || !$inputSet->isInputComplete()) {
    echo '<p>' . __('AF', 'inputInput', 'incompleteInput') . '</p>';
    return;
}

if (!$inputSet->isCalculationComplete()) {
    echo '<p>' . __('AF', 'inputInput', 'completeInputIncompleteCalculations') . '</p>';
    return;
}

if ($outputSet && count($outputSet->getIndicators()) == 0) {
    echo '<p>' . __('AF', 'inputInput', 'completeInputNoResult') . '</p>';
    return;
}

displayAF($af, $inputSet, __('AF', 'inputDocumentation', 'masterForm'));

/**
 * @param \AF\Domain\AF       $af
 * @param \AF\Domain\InputSet\InputSet $inputSet
 * @param string   $title
 * @param string   $refPrefix
 * @return Collapse
 */
function displayAF(AF $af, InputSet $inputSet, $title, $refPrefix = '')
{
    $collapse = new Collapse($refPrefix . $af->getRef(), $title);

    /** @var $mainAlgo MainSelectionAlgo */
    $mainAlgo = $af->getAlgoByRef(AF::ALGO_MAIN_REF);
    $subAlgos = $mainAlgo->getSelectedNumericAlgos($inputSet);

    foreach ($subAlgos as $subAlgo) {
        $algoCollapse = displayAlgo($subAlgo, $inputSet, $refPrefix . $af->getRef() . UI_Generic::REF_SEPARATOR);
        $collapse->appendContent($algoCollapse->render());
    }

    if (count($subAlgos) > 0) {
        echo $collapse->render();
    }

    // Sub-AF
    foreach (getSubAFInputSets($inputSet) as $array) {
        /** @var $subInputSet \AF\Domain\InputSet\SubInputSet */
        $subInputSet = $array['subInputSet'];
        $componentRef = $array['componentRef'];

        $newRefPrefix = $refPrefix . $af->getRef() . UI_Generic::REF_SEPARATOR
            . $componentRef . UI_Generic::REF_SEPARATOR;
        if (isset($array['number'])) {
            $newRefPrefix .= $array['number'] . UI_Generic::REF_SEPARATOR;
        }

        displayAF($subInputSet->getAF(), $subInputSet, $array['title'], $newRefPrefix);
    }
}


/**
 * @param \AF\Domain\InputSet\InputSet $inputSet
 * @return SubInputSet[]
 */
function getSubAFInputSets(InputSet $inputSet)
{
    $subAFInputSets = [];
    foreach ($inputSet->getInputs() as $input) {
        if ($input->isHidden()) {
            continue;
        }
        if ($input instanceof NotRepeatedSubAFInput) {
            $subInputSet = $input->getValue();
            $subAFInputSets[] = array(
                'title'        => $input->getComponent()->getLabel(),
                'subInputSet'  => $subInputSet,
                'componentRef' => $input->getRef(),
            );
            $subAFInputSets = array_merge($subAFInputSets, getSubAFInputSets($subInputSet));
        }
        if ($input instanceof RepeatedSubAFInput) {
            $subInputSets = $input->getValue();
            foreach ($subInputSets as $number => $subInputSet) {
                $title = $input->getComponent()->getLabel() . " #" . ($number + 1);
                if ($subInputSet->getFreeLabel()) {
                    $title .= " - " . $subInputSet->getFreeLabel();
                }
                $subAFInputSets[] = array(
                    'title'        => $title,
                    'subInputSet'  => $subInputSet,
                    'number'       => $number,
                    'componentRef' => $input->getRef(),
                );
                $subAFInputSets = array_merge($subAFInputSets, getSubAFInputSets($subInputSet));
            }
        }
    }
    return $subAFInputSets;
}


/**
 * @param Algo     $algo
 * @param \AF\Domain\InputSet\InputSet $inputSet
 * @param string   $refPrefix
 * @return Collapse
 */
function displayAlgo(Algo $algo, InputSet $inputSet, $refPrefix = '')
{
    $view = Zend_Controller_Action_HelperBroker::getStaticHelper('Layout')->getView();

    $locale = Core_Locale::loadDefault();

    $title = $algo->getRef();
    if ($algo instanceof NumericAlgo) {
        $title .= " <small>" . $algo->getLabel() . "</small>";
    }
    $collapse = new Collapse($refPrefix . $algo->getRef(), $title);

    // Type
    switch(get_class($algo)) {
        case NumericInputAlgo::class:
            $type = __('UI', 'name', 'input');
            break;
        case NumericExpressionAlgo::class:
            $type = __('TEC', 'name', 'expression');
            break;
        case NumericConstantAlgo::class:
            $type = __('UI', 'name', 'constant');
            break;
        case NumericParameterAlgo::class:
            $type = __('UI', 'name', 'parameter');
            break;
        default:
            $type = get_class($algo);
    }
    $collapse->appendContent("<p><strong>" . __('UI', 'name', 'type') . __('UI', 'other', ':') . "</strong> $type</p>");

    // Champ de saisie
    if ($algo instanceof NumericInputAlgo) {
        $collapse->appendContent("<p><strong>" . __('UI', 'name', 'field')  . __('UI', 'other', ':')
            . "</strong> {$algo->getLabel()}</p>");
    }

    // Paramètre
    if ($algo instanceof NumericParameterAlgo) {
        $family = $algo->getFamily();
        $collapse->appendContent('<p>');
        $collapse->appendContent('<strong>' . __('Parameter', 'name', 'family') . __('UI', 'other', ':') . '</strong>');
        $collapse->appendContent('<a href="' . $view->baseUrl('parameter/family/details/id/' . $family->getId()) . '">'
            . $family->getLabel() . "</a>");
        $collapse->appendContent('</p>');
        $collapse->appendContent('<ul>');
        foreach ($algo->getParameterCoordinates() as $parameterCoordinate) {
            $memberRef = $parameterCoordinate->getMember($inputSet);
            try {
                $dimension = $family->getDimension($parameterCoordinate->getDimensionRef());
                $member = $dimension->getMember($memberRef);
                $dimensionLabel = $dimension->getLabel();
                $memberLabel = $member->getLabel();
            } catch (Core_Exception_NotFound $e) {
                $dimensionLabel = $parameterCoordinate->getDimensionRef();
                $memberLabel = $memberRef;
            }
            $collapse->appendContent('<li>');
            $collapse->appendContent(ucfirst($dimensionLabel) . __('UI', 'other', ':') . $memberLabel);
            $collapse->appendContent('</li>');
        }
        $collapse->appendContent('</ul>');
    }

    // Expression
    if ($algo instanceof NumericExpressionAlgo) {
        $url = $view->url([
                          'module' => 'af',
                          'controller' => 'af',
                          'action' => 'popup-expression-graph',
                          'id' => $algo->getId(),
                          ]);
        $popup = new UI_Popup_Ajax('graph_' . $algo->getId(), $url);
        $popup->title = $algo->getRef();
        if ($algo->getLabel()) {
            $popup->title .= ' (' . $algo->getLabel() . ')';
        }
        $popup->addAttribute('class', 'large');
        $collapse->appendContent($popup->render());
        $buttonHTML = new Button(new Icon('search'));
        $buttonHTML->addClass('btn-xs');
        $buttonHTML->showModal('graph_' . $algo->getId());
        $expression = $algo->getExpression();
        $collapse->appendContent("<p><strong>" . __('TEC', 'name', 'expression') . __('UI', 'other', ':')
            . "</strong> $buttonHTML <code>$expression</code></p>");
    }

    // Valeur
    if ($algo instanceof NumericAlgo) {
        $value = $algo->execute($inputSet);
        $stringValue = $locale->formatNumber($value->getDigitalValue(), 20)
            . ' <strong>' . $value->getUnit()->getSymbol() . '</strong> ± '
            . $locale->formatNumber($value->getRelativeUncertainty()) . ' <strong>%</strong>';
        $collapse->appendContent("<p><strong>" . __('UI', 'name', 'value') . __('UI', 'other', ':')
            . "</strong> $stringValue</p>");
    }

    // Opérandes de l'expression
    if ($algo instanceof NumericExpressionAlgo) {
        // Opérandes de l'expression
        foreach ($algo->getSubAlgos() as $subAlgo) {
            $collapse->appendContent(displayAlgo($subAlgo, $inputSet,
               $refPrefix . $algo->getRef() . UI_Generic::REF_SEPARATOR)->render());
        }
    }

    return $collapse;
}
